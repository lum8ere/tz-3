// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"test-task3/libs/2_generated_models/model"
)

func newRefreshToken(db *gorm.DB, opts ...gen.DOOption) refreshToken {
	_refreshToken := refreshToken{}

	_refreshToken.refreshTokenDo.UseDB(db, opts...)
	_refreshToken.refreshTokenDo.UseModel(&model.RefreshToken{})

	tableName := _refreshToken.refreshTokenDo.TableName()
	_refreshToken.ALL = field.NewAsterisk(tableName)
	_refreshToken.ID = field.NewString(tableName, "id")
	_refreshToken.UserID = field.NewString(tableName, "user_id")
	_refreshToken.HashedToken = field.NewString(tableName, "hashed_token")
	_refreshToken.IPAddress = field.NewString(tableName, "ip_address")
	_refreshToken.Used = field.NewBool(tableName, "used")
	_refreshToken.CreatedAt = field.NewTime(tableName, "created_at")

	_refreshToken.fillFieldMap()

	return _refreshToken
}

type refreshToken struct {
	refreshTokenDo

	ALL         field.Asterisk
	ID          field.String
	UserID      field.String
	HashedToken field.String
	IPAddress   field.String
	Used        field.Bool
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (r refreshToken) Table(newTableName string) *refreshToken {
	r.refreshTokenDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refreshToken) As(alias string) *refreshToken {
	r.refreshTokenDo.DO = *(r.refreshTokenDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refreshToken) updateTableName(table string) *refreshToken {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.UserID = field.NewString(table, "user_id")
	r.HashedToken = field.NewString(table, "hashed_token")
	r.IPAddress = field.NewString(table, "ip_address")
	r.Used = field.NewBool(table, "used")
	r.CreatedAt = field.NewTime(table, "created_at")

	r.fillFieldMap()

	return r
}

func (r *refreshToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refreshToken) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["hashed_token"] = r.HashedToken
	r.fieldMap["ip_address"] = r.IPAddress
	r.fieldMap["used"] = r.Used
	r.fieldMap["created_at"] = r.CreatedAt
}

func (r refreshToken) clone(db *gorm.DB) refreshToken {
	r.refreshTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refreshToken) replaceDB(db *gorm.DB) refreshToken {
	r.refreshTokenDo.ReplaceDB(db)
	return r
}

type refreshTokenDo struct{ gen.DO }

type IRefreshTokenDo interface {
	gen.SubQuery
	Debug() IRefreshTokenDo
	WithContext(ctx context.Context) IRefreshTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRefreshTokenDo
	WriteDB() IRefreshTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRefreshTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRefreshTokenDo
	Not(conds ...gen.Condition) IRefreshTokenDo
	Or(conds ...gen.Condition) IRefreshTokenDo
	Select(conds ...field.Expr) IRefreshTokenDo
	Where(conds ...gen.Condition) IRefreshTokenDo
	Order(conds ...field.Expr) IRefreshTokenDo
	Distinct(cols ...field.Expr) IRefreshTokenDo
	Omit(cols ...field.Expr) IRefreshTokenDo
	Join(table schema.Tabler, on ...field.Expr) IRefreshTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRefreshTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRefreshTokenDo
	Group(cols ...field.Expr) IRefreshTokenDo
	Having(conds ...gen.Condition) IRefreshTokenDo
	Limit(limit int) IRefreshTokenDo
	Offset(offset int) IRefreshTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRefreshTokenDo
	Unscoped() IRefreshTokenDo
	Create(values ...*model.RefreshToken) error
	CreateInBatches(values []*model.RefreshToken, batchSize int) error
	Save(values ...*model.RefreshToken) error
	First() (*model.RefreshToken, error)
	Take() (*model.RefreshToken, error)
	Last() (*model.RefreshToken, error)
	Find() ([]*model.RefreshToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RefreshToken, err error)
	FindInBatches(result *[]*model.RefreshToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RefreshToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRefreshTokenDo
	Assign(attrs ...field.AssignExpr) IRefreshTokenDo
	Joins(fields ...field.RelationField) IRefreshTokenDo
	Preload(fields ...field.RelationField) IRefreshTokenDo
	FirstOrInit() (*model.RefreshToken, error)
	FirstOrCreate() (*model.RefreshToken, error)
	FindByPage(offset int, limit int) (result []*model.RefreshToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRefreshTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r refreshTokenDo) Debug() IRefreshTokenDo {
	return r.withDO(r.DO.Debug())
}

func (r refreshTokenDo) WithContext(ctx context.Context) IRefreshTokenDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refreshTokenDo) ReadDB() IRefreshTokenDo {
	return r.Clauses(dbresolver.Read)
}

func (r refreshTokenDo) WriteDB() IRefreshTokenDo {
	return r.Clauses(dbresolver.Write)
}

func (r refreshTokenDo) Session(config *gorm.Session) IRefreshTokenDo {
	return r.withDO(r.DO.Session(config))
}

func (r refreshTokenDo) Clauses(conds ...clause.Expression) IRefreshTokenDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refreshTokenDo) Returning(value interface{}, columns ...string) IRefreshTokenDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refreshTokenDo) Not(conds ...gen.Condition) IRefreshTokenDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refreshTokenDo) Or(conds ...gen.Condition) IRefreshTokenDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refreshTokenDo) Select(conds ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refreshTokenDo) Where(conds ...gen.Condition) IRefreshTokenDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refreshTokenDo) Order(conds ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refreshTokenDo) Distinct(cols ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refreshTokenDo) Omit(cols ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refreshTokenDo) Join(table schema.Tabler, on ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refreshTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refreshTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refreshTokenDo) Group(cols ...field.Expr) IRefreshTokenDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refreshTokenDo) Having(conds ...gen.Condition) IRefreshTokenDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refreshTokenDo) Limit(limit int) IRefreshTokenDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refreshTokenDo) Offset(offset int) IRefreshTokenDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refreshTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRefreshTokenDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refreshTokenDo) Unscoped() IRefreshTokenDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refreshTokenDo) Create(values ...*model.RefreshToken) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refreshTokenDo) CreateInBatches(values []*model.RefreshToken, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refreshTokenDo) Save(values ...*model.RefreshToken) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refreshTokenDo) First() (*model.RefreshToken, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshToken), nil
	}
}

func (r refreshTokenDo) Take() (*model.RefreshToken, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshToken), nil
	}
}

func (r refreshTokenDo) Last() (*model.RefreshToken, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshToken), nil
	}
}

func (r refreshTokenDo) Find() ([]*model.RefreshToken, error) {
	result, err := r.DO.Find()
	return result.([]*model.RefreshToken), err
}

func (r refreshTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RefreshToken, err error) {
	buf := make([]*model.RefreshToken, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refreshTokenDo) FindInBatches(result *[]*model.RefreshToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refreshTokenDo) Attrs(attrs ...field.AssignExpr) IRefreshTokenDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refreshTokenDo) Assign(attrs ...field.AssignExpr) IRefreshTokenDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refreshTokenDo) Joins(fields ...field.RelationField) IRefreshTokenDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refreshTokenDo) Preload(fields ...field.RelationField) IRefreshTokenDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refreshTokenDo) FirstOrInit() (*model.RefreshToken, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshToken), nil
	}
}

func (r refreshTokenDo) FirstOrCreate() (*model.RefreshToken, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RefreshToken), nil
	}
}

func (r refreshTokenDo) FindByPage(offset int, limit int) (result []*model.RefreshToken, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refreshTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refreshTokenDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refreshTokenDo) Delete(models ...*model.RefreshToken) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refreshTokenDo) withDO(do gen.Dao) *refreshTokenDo {
	r.DO = *do.(*gen.DO)
	return r
}
